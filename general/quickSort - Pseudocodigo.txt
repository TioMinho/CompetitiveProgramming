
Algoritmo: Particionar
Entrada: um vetor V[1..n], índices "i", "p" e "f"
Pré-condição: 1 <= i <= p <= f <= n
Saída: índice "m"
Pós-condição: (1) "m" é a nova posição do pivô pós-partição
			  (2) V[j] < V[m], para qualquer j em {i, ..., m-1}
			  (4) V[m] < V[j], para qualquer j em {m+1, ..., f}
------------------------------------------------------------------
1. | e := V[p]; V[p] := V[i]; V[i] := e		// Nessa linha nós trocamos o pivô com o elemento da posição "i"
2. | m := i; M := f
3. | ENQUANTO
4. |  | e := V[m]
5. |  | SE e <= V[i]
6. |  |  | ++m
7. |  | SENAO
8. |  |  | V[m] := V[M]; V[M] := e; --M
9. | e := V[i]; V[i] := V[m]; V[m] := e
10.| RETORNE m



Algoritmo: Selecionar_Pivo
Entrada: um vetor V[i..f], índices "i", "p" e "f"
Pré-condição: 1 <= i <= p <= f <= n
Saída: nenhuma
Pós-condição: (1) V[i..f] é uma permutação dos elementos iniciais
			  (2) Os trechos V[i..p-1] e V[p+1, f] são modificados
			  (3) V[j] <= V[p], para qualquer j em {i, ..., p-1}
			  (4) V[p] <= V[j], para qualquer j em {p+1, ..., f}
------------------------------------------------------------------
1. | q := Particionar(V[i..f], i, p, f)
2. | SE p = q
3. |  | RETORNE
4. | SE p < q
5. |  | Selecionar_Pivo(V[i..f], i, p, q-1)
6. | SENAO
7. |  | Selecionar_Pivo(V[i..f], q+1, p, f)



Algoritmo: Quicksort
Entrada: um vetor V[1..n], índices "i" e "f"
Pré-condição: 1 <= i <= p <= f <= n
Saída: nenhuma
Pós-condição: V[i..f] está ordenado
------------------------------------------------------------------
1. | SE f <= i
2. |  | RETORNE
3. | meio := (i+f)/2
4. | Selecionar_Pivo(V[1..n], i, meio, f)
5. | Quicksort(V[1..n], i, meio-1)
6. | Quicksort(V[1..n], meio+1, f)
